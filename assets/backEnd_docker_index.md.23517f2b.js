import{_ as l,o as r,c as p,M as o}from"./chunks/framework.be29e807.js";const n="/image/docker/docker_search.png",e="/image/docker/docker_pull.png",s="/image/docker/docker_run.png",t="/image/docker/docker_ps.png",g=JSON.parse('{"title":"Docker","description":"","frontmatter":{},"headers":[],"relativePath":"backEnd/docker/index.md","filePath":"backEnd/docker/index.md"}'),c={name:"backEnd/docker/index.md"};function i(d,a,b,u,h,m){return r(),p("div",null,a[0]||(a[0]=[o(`<h1 id="docker" tabindex="-1">Docker <a class="header-anchor" href="#docker" aria-label="Permalink to &quot;Docker&quot;">​</a></h1><ul><li><a href="https://juejin.cn/post/7002505996220416037?utm_source=gold_browser_extension" target="_blank" rel="noreferrer">VSCode + Docker 配置完美开发环境</a></li><li><a href="https://juejin.cn/post/6844903591375814669#heading-5" target="_blank" rel="noreferrer">从 0 开始了解 Docker</a></li><li><a href="https://www.runoob.com/docker/docker-mirror-acceleration.html" target="_blank" rel="noreferrer">Docker 镜像加速</a></li><li><a href="https://juejin.cn/post/6932808129189150734" target="_blank" rel="noreferrer">利用 docker 搭建前端开发环境</a></li></ul><h2 id="docker-命令" tabindex="-1">docker 命令 <a class="header-anchor" href="#docker-命令" aria-label="Permalink to &quot;docker 命令&quot;">​</a></h2><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">#检查docker的版本</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">version</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 查询镜像</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">serach</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">镜像名字</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+n+`" alt="image.png"></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 下载容器镜像</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">pull</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">learn/tutorial</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 执行pull命令的时候要写完整的名字，比如&quot;learn/tutorial&quot;。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><img src="`+e+`" alt="image.png"></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 容器运行进程</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">run</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">learn/tutorial</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">echo</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello word</span><span style="color:#89DDFF;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+s+`" alt="image.png"></p><h2 id="docker-入门教程" tabindex="-1">docker 入门教程 <a class="header-anchor" href="#docker-入门教程" aria-label="Permalink to &quot;docker 入门教程&quot;">​</a></h2><p><a href="https://www.docker.org.cn/book/docker/prepare-docker-5.html" target="_blank" rel="noreferrer">docker 入门教程</a></p><h3 id="_1、什么是-docker" tabindex="-1">1、什么是 docker <a class="header-anchor" href="#_1、什么是-docker" aria-label="Permalink to &quot;1、什么是 docker&quot;">​</a></h3><p>Docker 是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括 VMs（虚拟机）、 <a href="http://www.whatis.com.cn/word_5275.htm" target="_blank" rel="noreferrer">bare metal</a>、OpenStack 集群和其他的基础应用平台。</p><h4 id="docker-通常用于如下场景" tabindex="-1">Docker 通常用于如下场景： <a class="header-anchor" href="#docker-通常用于如下场景" aria-label="Permalink to &quot;Docker 通常用于如下场景：&quot;">​</a></h4><ul><li>web 应用的自动化打包和发布；</li><li>自动化测试和持续集成、发布；</li><li>在服务型环境中部署和调整数据库或其他的后台应用；</li><li>从头编译或者扩展现有的 OpenShift 或 Cloud Foundry 平台来搭建自己的 PaaS 环境。</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">#检查docker的版本</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">version</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_2、搜索可用-docker-镜像" tabindex="-1">2、搜索可用 docker 镜像 <a class="header-anchor" href="#_2、搜索可用-docker-镜像" aria-label="Permalink to &quot;2、搜索可用 docker 镜像&quot;">​</a></h3><p>使用 docker 最简单的方式莫过于从现有的容器镜像开始。Docker 官方网站专门有一个页面来存储所有可用的镜像，网址是： <a href="http://index.docker.io/" target="_blank" rel="noreferrer">index.docker.io</a>。你可以通过浏览这个网页来查找你想要使用的镜像，或者使用命令行的工具来检索。</p><p><a href="index.docker.io">官网可用镜像搜索</a> 命令行的格式为：docker search 镜像名字</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 查询镜像</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">serach</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">镜像名字</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+n+`" alt="image.png"></p><h3 id="_3、下载容器镜像" tabindex="-1">3、下载容器镜像 <a class="header-anchor" href="#_3、下载容器镜像" aria-label="Permalink to &quot;3、下载容器镜像&quot;">​</a></h3><p>下载镜像的命令非常简单，使用 docker pull 命令即可。(译者按：docker 命令和 git 有一些类似的地方）。在 docker 的镜像索引网站上面，镜像都是按照 <strong>用户名/</strong> <strong>镜像名</strong>的方式来存储的。有一组比较特殊的镜像，比如 ubuntu 这类基础镜像，经过官方的验证，值得信任，可以直接用 <strong>镜像名</strong>来检索到。</p><p>执行 pull 命令的时候要写完整的名字，比如&quot;learn/tutorial&quot;。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 下载容器镜像</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">pull</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">learn/tutorial</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 执行pull命令的时候要写完整的名字，比如&quot;learn/tutorial&quot;。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><img src="`+e+`" alt="image.png"></p><h3 id="_4、在-docker-容器中运行-hello-world" tabindex="-1">4、在 docker 容器中运行 hello world <a class="header-anchor" href="#_4、在-docker-容器中运行-hello-world" aria-label="Permalink to &quot;4、在 docker 容器中运行 hello world&quot;">​</a></h3><p>docker 容器可以理解为在沙盒中运行的进程。这个沙盒包含了该进程运行所必须的资源，包括文件系统、系统类库、shell 环境等等。但这个沙盒默认是不会运行任何程序的。你需要在沙盒中运行一个进程来启动某一个容器。<strong>这个进程是该容器的唯一进程，所以当该进程结束的时候，容器也会完全的停止。</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 容器运行进程</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">run</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">learn/tutorial</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">echo</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello word</span><span style="color:#89DDFF;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+s+`" alt="image.png"></p><h3 id="_5、在-docker-容器中安装新的程序" tabindex="-1">5、在 docker 容器中安装新的程序 <a class="header-anchor" href="#_5、在-docker-容器中安装新的程序" aria-label="Permalink to &quot;5、在 docker 容器中安装新的程序&quot;">​</a></h3><p>我们之前下载的 tutorial 镜像是基于 ubuntu 的，所以你可以使用 ubuntu 的 apt-get 命令来安装 ping 程序： <strong>apt-get install -y ping</strong>。 备注：apt-get 命令执行完毕之后，容器就会停止，<strong>但对容器的改动不会丢失。</strong></p><h4 id="提示" tabindex="-1">提示： <a class="header-anchor" href="#提示" aria-label="Permalink to &quot;提示：&quot;">​</a></h4><p>在执行 apt-get 命令的时候，要带上-y 参数。如果不指定-y 参数的话，apt-get 命令会进入交互模式，需要用户输入命令来进行确认，但在 docker 环境中是无法响应这种交互的。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 通过run在容器中安装程序</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">run</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">learn/tutorial</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">apt-get</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">install</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-y</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">ping</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+s+'" alt="image.png"></p><h3 id="_6、保存对容器的修改" tabindex="-1">6、保存对容器的修改 <a class="header-anchor" href="#_6、保存对容器的修改" aria-label="Permalink to &quot;6、保存对容器的修改&quot;">​</a></h3><p>当你对某一个容器做了修改之后（通过在容器中运行某一个命令），可以把对容器的修改保存下来，这样下次可以从保存后的最新状态运行该容器。docker 中保存状态的过程称之为 committing，它保存的新旧状态之间的区别，从而产生一个新的版本。</p><ol><li>运行 docker commit，可以查看该命令的参数列表。</li><li>你需要指定要提交保存容器的 ID。(译者按：通过 docker ps -l 命令获得)</li><li>无需拷贝完整的 id，通常来讲最开始的三至四个字母即可区分。（译者按：非常类似 git 里面的版本号)</li></ol><p>通过 docker ps -l 查看容器 id，将 learn/tutorial 容器保存为 learn/ping。 <img src="'+t+`" alt="image.png"></p><p>执行完 docker commit 命令之后，会返回新版本镜像的 id 号。</p><h3 id="_7、运行新的镜像" tabindex="-1">7、运行新的镜像 <a class="header-anchor" href="#_7、运行新的镜像" aria-label="Permalink to &quot;7、运行新的镜像&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">run</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">lean/ping</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">ping</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">www.google.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_8、检查运行中的镜像" tabindex="-1">8、检查运行中的镜像 <a class="header-anchor" href="#_8、检查运行中的镜像" aria-label="Permalink to &quot;8、检查运行中的镜像&quot;">​</a></h3><p>使用 docker ps 命令可以查看所有正在运行中的容器列表，使用 docker inspect 命令我们可以查看更详细的关于某一个容器的信息。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 查找某一个运行中容器的id</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">ps</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 查看容器的信息。</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">inspect</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">efe</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_8、发布自己的镜像" tabindex="-1">8、发布自己的镜像 <a class="header-anchor" href="#_8、发布自己的镜像" aria-label="Permalink to &quot;8、发布自己的镜像&quot;">​</a></h3><p>现在我们已经验证了新镜像可以正常工作，下一步我们可以将其发布到官方的索引网站。我们也可以把我们自己编译的镜像发布到索引页面，一方面可以自己重用，另一方面也可以分享给其他人使用。</p><ol><li>docker images 命令可以列出所有安装过的镜像。</li><li>docker push 命令可以将某一个镜像发布到官方网站。</li><li>你只能将镜像发布到自己的空间下面。这个模拟器登录的是 learn 帐号。</li></ol><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 发布/推送镜像</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">push</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">learn/ping</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="dockerfile" tabindex="-1">DockerFile <a class="header-anchor" href="#dockerfile" aria-label="Permalink to &quot;DockerFile&quot;">​</a></h3><div class="language-arduino line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">arduino</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">FROM node:latest</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">WORKDIR /app</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">COPY . .</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">RUN npm config set registry https://registry.npmmirror.com/</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">RUN npm install -g http-server</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">EXPOSE 8080</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">CMD [&quot;http-server&quot;, &quot;-p&quot;, &quot;8080&quot;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><ul><li>FROM：基于一个基础镜像来修改</li><li>WORKDIR：指定当前工作目录</li><li>COPY：把容器外的内容复制到容器内</li><li>EXPOSE：声明当前容器要访问的网络端口，比如这里起服务会用到 8080</li><li>RUN：在容器内执行命令</li><li>CMD：容器启动的时候执行的命令</li></ul><h3 id="dockerignore" tabindex="-1">.dockerignore <a class="header-anchor" href="#dockerignore" aria-label="Permalink to &quot;.dockerignore&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">*.md</span></span>
<span class="line"><span style="color:#babed8;">!README.md // 不包括 README.md</span></span>
<span class="line"><span style="color:#babed8;">node_modules/</span></span>
<span class="line"><span style="color:#babed8;">[a-c].txt</span></span>
<span class="line"><span style="color:#babed8;">.git/</span></span>
<span class="line"><span style="color:#babed8;">.DS_Store  // mac 的用于指定目录的图标、背景、字体大小的配置文件，这个一般都要忽略</span></span>
<span class="line"><span style="color:#babed8;">.vscode/</span></span>
<span class="line"><span style="color:#babed8;">.dockerignore</span></span>
<span class="line"><span style="color:#babed8;">.eslintignore</span></span>
<span class="line"><span style="color:#babed8;">.eslintrc</span></span>
<span class="line"><span style="color:#babed8;">.prettierrc</span></span>
<span class="line"><span style="color:#babed8;">.prettierignore</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="启动命令模版" tabindex="-1">启动命令模版 <a class="header-anchor" href="#启动命令模版" aria-label="Permalink to &quot;启动命令模版&quot;">​</a></h3><p>docker run --name nginx-test2 -p 80:80 -v /tmp/aaa:/usr/share/nginx/html -e KEY1=VALUE1 -d nginx:latest</p>`,58)]))}const k=l(c,[["render",i]]);export{g as __pageData,k as default};
