import{_ as s,o as a,c as n,O as l}from"./chunks/framework.62a149d4.js";const h=JSON.parse('{"title":"React 理论知识","description":"","frontmatter":{},"headers":[],"relativePath":"framework/workflow/react/index.md","filePath":"framework/workflow/react/index.md"}'),e={name:"framework/workflow/react/index.md"},o=l(`<h1 id="react-理论知识" tabindex="-1">React 理论知识 <a class="header-anchor" href="#react-理论知识" aria-label="Permalink to &quot;React 理论知识&quot;">​</a></h1><h2 id="宏观设计-数据驱动视图" tabindex="-1">宏观设计：数据驱动视图 <a class="header-anchor" href="#宏观设计-数据驱动视图" aria-label="Permalink to &quot;宏观设计：数据驱动视图&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">数据驱动视图</p><p>UI = render(data)</p></div><h2 id="虚拟-dom" tabindex="-1">虚拟 DOM <a class="header-anchor" href="#虚拟-dom" aria-label="Permalink to &quot;虚拟 DOM&quot;">​</a></h2><p>React.createElement 计算出来的东西叫做虚拟 DOM，虚拟 DOM 仅仅是对真实 DOM 的一层描述而已。要想把虚拟 DOM 转换为真实 DOM，我们需要调用的是  ReactDOM.render()这个 API</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> rootElement </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">root</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">ReactDOM</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">render</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">App</span><span style="color:#89DDFF;"> /&gt;,</span><span style="color:#A6ACCD;"> rootElement)</span></span></code></pre></div><h2 id="fiber-架构" tabindex="-1">fiber 架构 <a class="header-anchor" href="#fiber-架构" aria-label="Permalink to &quot;fiber 架构&quot;">​</a></h2><h3 id="什么是-fiber" tabindex="-1">什么是 fiber <a class="header-anchor" href="#什么是-fiber" aria-label="Permalink to &quot;什么是 fiber&quot;">​</a></h3><p>在 React16 以前，React 更新是通过树的深度优先遍历完成的，遍历是不能中断的，当树的层级深就会产生栈的层级过深，页面渲染速度变慢的问题，为了解决这个问题引入了 fiber，React fiber 就是虚拟 DOM，它是一个链表结构，返回了 return、children、siblings，分别代表父 fiber，子 fiber 和兄弟 fiber，随时可中断</p><h2 id="组件设计" tabindex="-1">组件设计 <a class="header-anchor" href="#组件设计" aria-label="Permalink to &quot;组件设计&quot;">​</a></h2><ul><li>高阶组件 HOC</li><li>render props</li><li>容器组件/展示组件</li><li>函数组件 + hooks</li></ul><h3 id="高阶组件" tabindex="-1">高阶组件 <a class="header-anchor" href="#高阶组件" aria-label="Permalink to &quot;高阶组件&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">高阶组件</p><p>高阶组件（HOC）是 React 中用于复用组件逻辑的一种高级技巧。HOC 自身不是 React API 的一部分，它是一种基于 React 的组合特性而形成的设计模式。 具体而言，高阶组件是参数为组件，返回值为新组件的函数。 ——React 官方文档</p></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Hoc</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">Component</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">WrapComponent</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">extends</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Component</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 强化操作</span></span>
<span class="line"><span style="color:#F07178;">    render</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Component</span><span style="color:#89DDFF;"> {...this.</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">} /&gt;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="render-props" tabindex="-1">render props <a class="header-anchor" href="#render-props" aria-label="Permalink to &quot;render props&quot;">​</a></h3><p>render props 模式和组合模式类似。区别不同的是，用函数的形式代替 children。函数的参数，由容器组件提供，这样的好处，将容器组件的状态，提升到当前外层组件中</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">App</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">aProps</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    name</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">《React进阶实践指南》</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Container</span><span style="color:#89DDFF;">&gt;{(</span><span style="color:#A6ACCD;font-style:italic;">cProps</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Children</span><span style="color:#89DDFF;"> {...</span><span style="color:#A6ACCD;">cProps</span><span style="color:#89DDFF;">} {...</span><span style="color:#A6ACCD;">aProps</span><span style="color:#89DDFF;">} /&gt;}&lt;/</span><span style="color:#FFCB6B;">Container</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="性能优化手段" tabindex="-1">性能优化手段 <a class="header-anchor" href="#性能优化手段" aria-label="Permalink to &quot;性能优化手段&quot;">​</a></h2><ol><li>shouldComponentUpdate</li><li>memo</li><li>getDerviedStateFromProps</li><li>使用 Fragment</li><li>使用正确的 key</li><li>拆分尽可能小的可复用组件，ErrorBoundary</li><li>使用 React.lazy 和 React.Suspense 延迟加载不需要立马使用的组件</li></ol><h2 id="相关文章" tabindex="-1">相关文章 <a class="header-anchor" href="#相关文章" aria-label="Permalink to &quot;相关文章&quot;">​</a></h2><ul><li><a href="https://juejin.cn/book/7173591403639865377" target="_blank" rel="noreferrer">javascript 函数式编程实践指南小册</a></li><li><a href="https://juejin.cn/post/6940422320427106335#heading-55" target="_blank" rel="noreferrer">一文吃透 React 高阶组件(HOC)</a></li><li><a href="https://juejin.cn/post/7007214462813863950#heading-8" target="_blank" rel="noreferrer">「React 进阶」 学好这些 React 设计模式，能让你的 React 项目飞起来</a></li></ul>`,21),p=[o];function t(r,c,i,F,y,D){return a(),n("div",null,p)}const C=s(e,[["render",t]]);export{h as __pageData,C as default};
