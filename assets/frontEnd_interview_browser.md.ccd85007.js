import{_ as e,o as a,c as t,O as r}from"./chunks/framework.932f8bee.js";const m=JSON.parse('{"title":"浏览器相关","description":"","frontmatter":{},"headers":[],"relativePath":"frontEnd/interview/browser.md","filePath":"frontEnd/interview/browser.md"}'),n={name:"frontEnd/interview/browser.md"},o=r('<h1 id="浏览器相关" tabindex="-1">浏览器相关 <a class="header-anchor" href="#浏览器相关" aria-label="Permalink to &quot;浏览器相关&quot;">​</a></h1><h2 id="async-和-defer-的解析过程" tabindex="-1">async 和 defer 的解析过程 <a class="header-anchor" href="#async-和-defer-的解析过程" aria-label="Permalink to &quot;async 和 defer 的解析过程&quot;">​</a></h2><p>浏览器解析到带 async 属性的 script 标签时，不会中断 html 解析，而是并行下载脚本；当脚本下载完成后，中断解析并执行脚本； 浏览器解析到带 defer 属性的 script 标签时，不会中断 html 解析，而是并行下载脚本；当浏览器解析完 HTML 时、DOMContentLoaded 事件即将被触发时，此时再执行下载完成的脚本；</p><h2 id="浏览器重绘与重排的区别" tabindex="-1">浏览器重绘与重排的区别 <a class="header-anchor" href="#浏览器重绘与重排的区别" aria-label="Permalink to &quot;浏览器重绘与重排的区别&quot;">​</a></h2><ul><li>重排/回流（Reflow）：当 DOM 的变化影响了元素的几何信息，浏览器需要重新计算元素的几何属性，将其安放在界面中的正确位置，这个过程叫做重排。表现为重新生成布局，重新排列元素。</li><li>重绘(Repaint): 当一个元素的外观发生改变，但没有改变布局,重新把元素外观绘制出来的过程，叫做重绘。表现为某些元素的外观被改变</li></ul><p>重绘不一定会出现重排/回流，但重排必然会导致重绘。</p>',6),i=[o];function s(c,d,l,_,h,f){return a(),t("div",null,i)}const u=e(n,[["render",s]]);export{m as __pageData,u as default};
