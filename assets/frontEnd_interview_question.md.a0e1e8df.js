import{_ as a,o as e,c as t,O as i}from"./chunks/framework.5c60c28a.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"frontEnd/interview/question.md","filePath":"frontEnd/interview/question.md"}'),l={name:"frontEnd/interview/question.md"},r=i('<h2 id="问题记录" tabindex="-1">问题记录 <a class="header-anchor" href="#问题记录" aria-label="Permalink to &quot;问题记录&quot;">​</a></h2><h3 id="浏览器相关" tabindex="-1">浏览器相关 <a class="header-anchor" href="#浏览器相关" aria-label="Permalink to &quot;浏览器相关&quot;">​</a></h3><ul><li><h4 id="跨域是什么-如何解决跨域问题" tabindex="-1">跨域是什么？如何解决跨域问题 <a class="header-anchor" href="#跨域是什么-如何解决跨域问题" aria-label="Permalink to &quot;跨域是什么？如何解决跨域问题&quot;">​</a></h4></li><li><a href="https://blog.csdn.net/qi341500/article/details/129042515" target="_blank" rel="noreferrer">nginx 解决跨域问题</a></li></ul><h3 id="计算机网络相关" tabindex="-1">计算机网络相关 <a class="header-anchor" href="#计算机网络相关" aria-label="Permalink to &quot;计算机网络相关&quot;">​</a></h3><ul><li><h4 id="xss-攻击是什么以及如何防御-web-安全-xss-csrf" tabindex="-1">XSS 攻击是什么以及如何防御？#web 安全（xss/csrf） <a class="header-anchor" href="#xss-攻击是什么以及如何防御-web-安全-xss-csrf" aria-label="Permalink to &quot;XSS 攻击是什么以及如何防御？#web 安全（xss/csrf）&quot;">​</a></h4></li><li><h4 id="https-如何加密" tabindex="-1">HTTPS 如何加密 <a class="header-anchor" href="#https-如何加密" aria-label="Permalink to &quot;HTTPS 如何加密&quot;">​</a></h4></li><li><h4 id="_301-和-302-的区别-什么情况下应该使用" tabindex="-1">301 和 302 的区别，什么情况下应该使用 <a class="header-anchor" href="#_301-和-302-的区别-什么情况下应该使用" aria-label="Permalink to &quot;301 和 302 的区别，什么情况下应该使用&quot;">​</a></h4></li></ul><h3 id="业务功能实现" tabindex="-1">业务功能实现 <a class="header-anchor" href="#业务功能实现" aria-label="Permalink to &quot;业务功能实现&quot;">​</a></h3><ul><li><h4 id="防抖与节流" tabindex="-1">防抖与节流 <a class="header-anchor" href="#防抖与节流" aria-label="Permalink to &quot;防抖与节流&quot;">​</a></h4></li></ul><h3 id="javascript-基础相关" tabindex="-1">javascript 基础相关 <a class="header-anchor" href="#javascript-基础相关" aria-label="Permalink to &quot;javascript 基础相关&quot;">​</a></h3><ul><li><h4 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-label="Permalink to &quot;闭包&quot;">​</a></h4></li><li><h4 id="promise" tabindex="-1">promise <a class="header-anchor" href="#promise" aria-label="Permalink to &quot;promise&quot;">​</a></h4></li><li><h4 id="原型链" tabindex="-1">原型链 <a class="header-anchor" href="#原型链" aria-label="Permalink to &quot;原型链&quot;">​</a></h4></li><li><h4 id="事件循环" tabindex="-1">事件循环 <a class="header-anchor" href="#事件循环" aria-label="Permalink to &quot;事件循环&quot;">​</a></h4></li><li><h4 id="函数柯里化" tabindex="-1">函数柯里化 <a class="header-anchor" href="#函数柯里化" aria-label="Permalink to &quot;函数柯里化&quot;">​</a></h4></li><li><h4 id="浅拷贝和深拷贝" tabindex="-1">浅拷贝和深拷贝 <a class="header-anchor" href="#浅拷贝和深拷贝" aria-label="Permalink to &quot;浅拷贝和深拷贝&quot;">​</a></h4></li><li><h4 id="call、bind-和-apply-的使用方法以及源码手写" tabindex="-1">call、bind 和 apply 的使用方法以及源码手写 <a class="header-anchor" href="#call、bind-和-apply-的使用方法以及源码手写" aria-label="Permalink to &quot;call、bind 和 apply 的使用方法以及源码手写&quot;">​</a></h4></li></ul><h3 id="css-相关" tabindex="-1">CSS 相关 <a class="header-anchor" href="#css-相关" aria-label="Permalink to &quot;CSS 相关&quot;">​</a></h3><ul><li><h4 id="css-如何实现垂直居中布局" tabindex="-1">css 如何实现垂直居中布局 <a class="header-anchor" href="#css-如何实现垂直居中布局" aria-label="Permalink to &quot;css 如何实现垂直居中布局&quot;">​</a></h4></li><li><h4 id="重绘、回流" tabindex="-1">重绘、回流 <a class="header-anchor" href="#重绘、回流" aria-label="Permalink to &quot;重绘、回流&quot;">​</a></h4></li><li><h4 id="bfc" tabindex="-1">BFC <a class="header-anchor" href="#bfc" aria-label="Permalink to &quot;BFC&quot;">​</a></h4></li></ul><h3 id="react-相关" tabindex="-1">React 相关 <a class="header-anchor" href="#react-相关" aria-label="Permalink to &quot;React 相关&quot;">​</a></h3><ul><li><h4 id="react-v16-后完整的生命周期" tabindex="-1">React V16 后完整的生命周期 <a class="header-anchor" href="#react-v16-后完整的生命周期" aria-label="Permalink to &quot;React V16 后完整的生命周期&quot;">​</a></h4></li><li><h4 id="react-setstate-批量处理-涉及-setstate-是异步还是同步的问题" tabindex="-1">React setState 批量处理（涉及 setState 是异步还是同步的问题） <a class="header-anchor" href="#react-setstate-批量处理-涉及-setstate-是异步还是同步的问题" aria-label="Permalink to &quot;React setState 批量处理（涉及 setState 是异步还是同步的问题）&quot;">​</a></h4></li><li><h4 id="react-fiber-架构" tabindex="-1">React Fiber 架构 <a class="header-anchor" href="#react-fiber-架构" aria-label="Permalink to &quot;React Fiber 架构&quot;">​</a></h4></li><li><h4 id="react-diff-算法" tabindex="-1">React Diff 算法 <a class="header-anchor" href="#react-diff-算法" aria-label="Permalink to &quot;React Diff 算法&quot;">​</a></h4></li><li><h4 id="react-组件什么时候重新渲染" tabindex="-1">React 组件什么时候重新渲染 <a class="header-anchor" href="#react-组件什么时候重新渲染" aria-label="Permalink to &quot;React 组件什么时候重新渲染&quot;">​</a></h4></li><li><h4 id="usememo-与-usecallback-的使用及原理" tabindex="-1">useMemo 与 useCallback 的使用及原理 <a class="header-anchor" href="#usememo-与-usecallback-的使用及原理" aria-label="Permalink to &quot;useMemo 与 useCallback 的使用及原理&quot;">​</a></h4></li><li><h4 id="useeffect-里可以使用-if-吗" tabindex="-1">useEffect 里可以使用 if 吗 <a class="header-anchor" href="#useeffect-里可以使用-if-吗" aria-label="Permalink to &quot;useEffect 里可以使用 if 吗&quot;">​</a></h4></li><li><h4 id="封装过自定义-hook-吗-举个业务例子" tabindex="-1">封装过自定义 hook 吗，举个业务例子 <a class="header-anchor" href="#封装过自定义-hook-吗-举个业务例子" aria-label="Permalink to &quot;封装过自定义 hook 吗，举个业务例子&quot;">​</a></h4></li></ul><h3 id="工程化相关" tabindex="-1">工程化相关 <a class="header-anchor" href="#工程化相关" aria-label="Permalink to &quot;工程化相关&quot;">​</a></h3><ul><li><h4 id="webpack-打包优化" tabindex="-1">webpack 打包优化 <a class="header-anchor" href="#webpack-打包优化" aria-label="Permalink to &quot;webpack 打包优化&quot;">​</a></h4></li><li><h4 id="eslint、prettier-和-commitlint-相关配置" tabindex="-1">ESLint、Prettier 和 CommitLint 相关配置 <a class="header-anchor" href="#eslint、prettier-和-commitlint-相关配置" aria-label="Permalink to &quot;ESLint、Prettier 和 CommitLint 相关配置&quot;">​</a></h4></li><li><h4 id="工程化的理解和实践" tabindex="-1">工程化的理解和实践 <a class="header-anchor" href="#工程化的理解和实践" aria-label="Permalink to &quot;工程化的理解和实践&quot;">​</a></h4></li></ul>',15),o=[r];function h(s,n,c,d,u,b){return e(),t("div",null,o)}const m=a(l,[["render",h]]);export{q as __pageData,m as default};
