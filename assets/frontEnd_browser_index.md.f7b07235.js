import{_ as n,A as l,o,c as e,C as p,O as s}from"./chunks/framework.ff85bc08.js";const t="/image/browser/getBattery.jpg",B=JSON.parse('{"title":"浏览器 理论知识点","description":"","frontmatter":{},"headers":[],"relativePath":"frontEnd/browser/index.md","filePath":"frontEnd/browser/index.md"}'),r={name:"frontEnd/browser/index.md"},c=s('<h1 id="浏览器-理论知识点" tabindex="-1">浏览器 理论知识点 <a class="header-anchor" href="#浏览器-理论知识点" aria-label="Permalink to &quot;浏览器 理论知识点&quot;">​</a></h1><h2 id="跨域" tabindex="-1">跨域 <a class="header-anchor" href="#跨域" aria-label="Permalink to &quot;跨域&quot;">​</a></h2><p>只有协议、域名、端口都相同才算同源</p><h2 id="前端路由" tabindex="-1">前端路由 <a class="header-anchor" href="#前端路由" aria-label="Permalink to &quot;前端路由&quot;">​</a></h2><ul><li>hash 模式</li><li>history 模式</li></ul><h2 id="浏览器缓存" tabindex="-1">浏览器缓存 <a class="header-anchor" href="#浏览器缓存" aria-label="Permalink to &quot;浏览器缓存&quot;">​</a></h2>',6),i=s(`<h3 id="失效策略划分" tabindex="-1">失效策略划分 <a class="header-anchor" href="#失效策略划分" aria-label="Permalink to &quot;失效策略划分&quot;">​</a></h3><ul><li>强缓存</li><li>协商缓存</li><li>启发式缓存 <ul><li>响应报头中没有 max-age（s-maxage） 和 expires 这两个关键的字段值时，会触发启发式缓存</li></ul></li></ul><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">date</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">Thu, 02 Sep 2021 13:28:56 GMT</span></span>
<span class="line"><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">10467792</span></span>
<span class="line"><span style="color:#F07178;">cache-control</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">public</span></span>
<span class="line"><span style="color:#F07178;">last-modified</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">Mon, 26 Apr 2021 09:56:06 GMT</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">缓存新鲜度 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">max</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;">,（</span><span style="color:#C792EA;">date</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">last</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">modified)) </span><span style="color:#89DDFF;">*</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">10</span><span style="color:#BABED8;">%</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">-- 根据响应报头中 date 与 last-modified 值之差与 0 取最大值后取其值的百分之十作为缓存时间。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="缓存位置划分" tabindex="-1">缓存位置划分 <a class="header-anchor" href="#缓存位置划分" aria-label="Permalink to &quot;缓存位置划分&quot;">​</a></h3><ul><li>Service Worker Cache</li><li>Memory Cache</li><li>Disk Cache</li><li>Push Cache</li></ul><h3 id="存储型缓存" tabindex="-1">存储型缓存 <a class="header-anchor" href="#存储型缓存" aria-label="Permalink to &quot;存储型缓存&quot;">​</a></h3><ul><li>cookie</li><li>localStorage、sessionStorage</li><li>IndexedDB</li></ul><p>当用户从客户端界面填写账号密码点击登陆后，会讲数据发送给服务器进行验证<br> 如果服务端判断用户账号存在且密码正确则像客户端返回并颁发有效的 token 信息，校验失败则返回错误信息，拒绝登录</p><p>一旦唯一并有效的 token 信息颁发到客户端，后续的所有需经过登录校验的接口请求客户端都需要携带 token 信息 发送给服务端判断请求的有效性，因此 token 在客户端的存储及使用是必不可少的一环</p><p>常见的客户端存储 token 信息有</p><ul><li>服务端自动植入</li><li>前端手动存储</li></ul><h4 id="服务端自动植入" tabindex="-1">服务端自动植入 <a class="header-anchor" href="#服务端自动植入" aria-label="Permalink to &quot;服务端自动植入&quot;">​</a></h4><p>服务端登录接口可以在返回前端的响应报头中设置首部字段 set-cookie 来将 token 信息植入浏览器 cookie 中</p><p>set-cookie 指令值包含了必选项 cookie-name=cookie-value 值和名的形式，同时还包括了可选项 Path（路径）、Domain（域名）、Max-Age（有效时间）等，以分号分隔。</p><p>然后前端调用任何同域下的借口时，浏览器会自动将网站的 cookie 值附加在请求头中传给后端进行校验，而前端则不需要关系 token 的存取问题。</p><h5 id="封装-cookie-操作库-——-js-cookie" tabindex="-1">封装 Cookie 操作库 —— js-cookie <a class="header-anchor" href="#封装-cookie-操作库-——-js-cookie" aria-label="Permalink to &quot;封装 Cookie 操作库 —— js-cookie&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> Cookies </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">js-cookie</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 存储 Cookie</span></span>
<span class="line"><span style="color:#BABED8;">Cookies</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">juejin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">domain</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">juejin.cn</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 读取 Cookie</span></span>
<span class="line"><span style="color:#BABED8;">Cookies</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 删除 Cookie</span></span>
<span class="line"><span style="color:#BABED8;">Cookies</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">remove</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="前端手动存储" tabindex="-1">前端手动存储 <a class="header-anchor" href="#前端手动存储" aria-label="Permalink to &quot;前端手动存储&quot;">​</a></h4><p>相比服务端自动植入，前端存储的方式不受限于浏览器环境，比如像 APP 或小程序等一些没有浏览器 cookie 的环境下也可以使用该种方式。</p><p>这种方式在服务器校验登录信息成功后，讲 token 信息以响应体的方式返回给前端</p><p>而前端则在获取到 token 信息后用存储方法将数据持久化缓存起来，并在退出后手动清除。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> axios </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">axios</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> http </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">params</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">instance</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">axios</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    baseURL</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://juejin.cn</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">token</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">localStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getItem</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">token</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 从缓存中获取对应 name 值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">instance</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    url</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/xxx/xxx</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    method</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">post</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    data</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">params</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    headers</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">x-token</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">token</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 前端手动设置自定义 token 响应头</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="实用-api" tabindex="-1">实用 API <a class="header-anchor" href="#实用-api" aria-label="Permalink to &quot;实用 API&quot;">​</a></h2><h3 id="window-navigator-getbattery" tabindex="-1">window.navigator.getBattery() <a class="header-anchor" href="#window-navigator-getbattery" aria-label="Permalink to &quot;window.navigator.getBattery()&quot;">​</a></h3><p>获取「电脑的充电信息」，电量变化会触发「chargingchange 事件」</p><p><img src="`+t+'" alt="获取设备电量"></p><h2 id="相关文章" tabindex="-1">相关文章 <a class="header-anchor" href="#相关文章" aria-label="Permalink to &quot;相关文章&quot;">​</a></h2><p><a href="https://juejin.cn/post/7168637354536599559#heading-102" target="_blank" rel="noreferrer">面试知识点复盘【浏览器原理&amp;安全】篇</a></p>',29);function y(D,F,u,d,b,m){const a=l("XmindViewer");return o(),e("div",null,[c,p(a,{url:"/browser_cache.xmind"}),i])}const A=n(r,[["render",y]]);export{B as __pageData,A as default};
